Question: Given a list of pizza toppings, consider all the possible 3-topping pizzas, and print out the total cost of those 3 toppings.
Sort the results with the highest total cost on the top followed by pizza toppings in ascending order.

Break ties by listing the ingredients in alphabetical order, starting from the first ingredient, followed by the second and third.
Do not display pizzas where a topping is repeated. For example, ‘Pepperoni,Pepperoni,Onion Pizza’.

pizza_toppings Example Input:

topping_name	ingredient_cost
Pepperoni	0.50
Sausage	0.70
Chicken	0.55
Extra Cheese	0.40

Example Output:

pizza	total_cost
Chicken,Pepperoni,Sausage	1.75
Chicken,Extra Cheese,Sausage	1.65
Extra Cheese,Pepperoni,Sausage	1.60
Chicken,Extra Cheese,Pepperoni	1.45


Query:

--CONCAT() or || to concatenate two or more strings into one.
--SELECT CONCAT(p1.topping_name,',', p2.topping_name,',', p3.topping_name)AS pizza,

SELECT CONCAT_WS(',', p1.topping_name, p2.topping_name, p3.topping_name) AS pizza, 
p1.ingredient_cost + p2.ingredient_cost + p3.ingredient_cost AS total_cost 

--To join a table with itself multiple times horizontally, you can use table aliases and perform join.
--Assigning different aliases (p1) to the same table, you can treat it as separate instances and join them together.

FROM pizza_toppings p1

--Using < for string values is a trick to prevent duplication 
--and makes sure that second topping's name comes after first topping's name

JOIN pizza_toppings p2 ON p1.topping_name < p2.topping_name
JOIN pizza_toppings p3 ON p2.topping_name < p3.topping_name
ORDER BY total_cost DESC, pizza;


/* Another solution using CROSS JOIN.

SELECT CONCAT(p1.topping_name,',', p2.topping_name,',', p3.topping_name) AS pizza,
p1.ingredient_cost + p2.ingredient_cost + p3.ingredient_cost AS total_cost
FROM pizza_toppings p1
CROSS JOIN pizza_toppings p2
CROSS JOIN pizza_toppings p3
WHERE p1.topping_name < p2.topping_name
AND p2.topping_name < p3.topping_name
ORDER BY total_cost DESC, pizza;

*/

